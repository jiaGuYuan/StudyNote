XPath 可用来在 XML 文档中对元素和属性进行遍历,
XPath 使用路径表达式来选取 XML 文档中的节点或者节点集.


在 XPath 中, 有七种类型的节点:
    1. 元素
    2. 属性
    3. 文本
    4. 命名空间
    5. 处理指令
    6. 注释
    7. 文档节点(或称为根节点)
    
Eg:
    <?xml version="1.0" encoding="ISO-8859-1"?>
    <bookstore>
    <book>
      <title lang="en">Harry Potter</title>
      <author>J K. Rowling</author> 
      <year>2005</year>
      <price>29.99</price>
    </book>
    </bookstore>
节点类别说明:
    <bookstore> (文档节点)
    <author>J K. Rowling</author> (元素节点)
    lang="en" (属性节点)
    
基本值(或称原子值，Atomic value):
    基本值是无父或无子的节点。
    基本值的例子：
    J K. Rowling
    "en"
    
项目(Item):
    项目是基本值或者节点。
    
    
节点关系:
    父（Parent） --每个元素以及属性都有一个父
    子（Children）--元素节点可有零个、一个或多个子
    同胞（Sibling）--拥有相同的父的节点
    先辈（Ancestor）
    后代（Descendant）
    
    
常用的路径表达式:
    表达式          描述
    nodename        从当前节点下选取名为nodename的所有子节点.
    /               从根节点选取(路径起始于/,则代表到某元素的绝对路径!)
    //              从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。
    .               选取当前节点。
    ..              选取当前节点的父节点。
    @               选取属性。
    
    说明: /, nodename, // --有点类似于绝对路径,相对路径和全局搜索
          /bookstore/book/title:　表示按照绝对路径查找title节点
          book/title: 表示根据以当前节点为基准，按照相对路径查找title节点. (使用相对路径之前要先确认当前位置)
          ./book/title: 与book/title一样
          //book/title: 在全局范围内查找匹配"book/title"路径的节点("//"会无视当前节点的位置; 如果只要在当前节点下查找所有,使用".//xxx")
    
    示例:
    路径表达式          结果
    bookstore           选取 bookstore 元素的所有子节点。
    /bookstore          选取根元素 bookstore。注释：假如路径起始于/，则此路径始终代表到某元素的绝对路径！
    bookstore/book      选取属于 bookstore 的子元素的所有 book 元素。
    //book              选取所有 book 子元素，而不管它们在文档中的位置。
    bookstore//book     选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。
    //@lang             选取名为 lang 的所有属性(而不管它们在文档中的位置)。
    book//@lang         选取book中名为 lang 的所有属性
        
    
    
谓语（Predicates）:
    谓语用来查找某个特定的节点或者包含某个指定的值的节点。
    谓语被嵌在方括号中。
    
    实例:
    路径表达式                          结果
    /bookstore/book[1]                  选取属于 bookstore 子元素的第一个 book 元素。
    /bookstore/book[last()]             选取属于 bookstore 子元素的最后一个 book 元素。
    /bookstore/book[last()-1]           选取属于 bookstore 子元素的倒数第二个 book 元素。
    /bookstore/book[position()<3]       选取最前面的两个属于 bookstore 元素的子元素的 book 元素。
    //title[@lang]                      选取所有拥有名为 lang 的属性的 title 元素。
    //title[@lang="eng"]                选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。
    /bookstore/book[price>35.00]        选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。
    /bookstore/book[price>35.00]/title  选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。
    谓词中可使用的函数: 
        starts_with(), contains(), re:test(), ...
        如: sel.xpath("//li[re:test(@class, "item-\d$")]").extract() --选择所有li元素，且这些元素的class属性符合指定的正则条件
    
    
选取未知节点(通配符):
    XPath 通配符可用来选取未知的 XML 元素。
    通配符          描述
    *               匹配任何元素节点。
    @*              匹配任何有属性节点。
    node()          匹配任何类型的节点。

    实例:
    路径表达式          结果
    /bookstore/*        选取 bookstore 元素的所有子元素。
    //*                 选取文档中的所有元素。
    //title[@*]         选取所有带有属性的 title 元素。


选取若干路径:
    通过在路径表达式中使用“|”运算符，您可以选取若干个路径。

    实例:
    路径表达式                      结果
    //book/title | //book/price     选取 book 元素的所有 title 和 price 元素。
    //title | //price               选取文档中的所有 title 和 price 元素。
    /bookstore/book/title | //price 选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。


XPath 轴:
    轴可定义相对于当前节点的节点集。

    轴名称                     结果
    ancestor                    选取当前节点的所有先辈（父、祖父等）。
    ancestor-or-self            选取当前节点的所有先辈（父、祖父等）以及当前节点本身。
    attribute                   选取当前节点的所有属性。
    child                       选取当前节点的所有子元素。
    descendant                  选取当前节点的所有后代元素（子、孙等）。
    descendant-or-self          选取当前节点的所有后代元素（子、孙等）以及当前节点本身。
    following                   选取文档中当前节点的结束标签之后的所有节点。
    namespace                   选取当前节点的所有命名空间节点。
    parent                      选取当前节点的父节点。
    preceding                   选取文档中当前节点的开始标签之前的所有节点。
    following-sibling           选取当前节点之后的所有同级节点 
    preceding-sibling           选取当前节点之前的所有同级节点。
    self                        选取当前节点。

    
位置路径表达式:
    位置路径可以是绝对的，也可以是相对的。

    绝对路径起始于正斜杠( / )，而相对路径不会这样。在两种情况中，位置路径均包括一个或多个步，每个步均被斜杠分割：

    绝对位置路径:
        /step/step/...
    相对位置路径:
        step/step/...
    
步（step）包括:
    轴（axis）:
        定义所选节点与当前节点之间的树关系
    节点测试（node-test）:
        识别某个轴内部的节点
    零个或者更多谓语（predicate）:
        更深入地提炼所选的节点集
    
步的语法:
    轴名称::节点测试[谓语]
    
    实例:
    例子                    结果
    child::book             选取所有属于当前节点的子元素的 book 节点。
    attribute::lang         选取当前节点的 lang 属性。
    child::*                选取当前节点的所有子元素。
    attribute::*            选取当前节点的所有属性。
    child::text()           选取当前节点的所有文本子节点。
    child::node()           选取当前节点的所有子节点。
    descendant::book        选取当前节点的所有 book 后代。
    ancestor::book          选择当前节点的所有 book 先辈。
    ancestor-or-self::book  选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）
    child::*/child::price   选取当前节点的所有 price 孙节点。
    

