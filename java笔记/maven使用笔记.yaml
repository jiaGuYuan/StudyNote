maven通过pom.xml来管理jar包

eclipse2019中自带了maven:(window -> preferences -> maven -> Installations 可以查看eclipse内嵌maven的版本信息)
    卸载自带插件的方法:
        卸载插件的方法:
    Help --> about Eclipse IDE -> Installation Details -->选择要卸载的插件 -> Uninstallaion -> ...
    
    默认本地仓库的路径是%USER_HOME%/.m2/repository
    maven通过settings.xml配置本地仓库和外部仓库的路径; 但是eclipse自带的maven没有settings.xml文件,需要手动创建一个，并在eclipse中进行配置(Preferences->Maven->User Settings->在User Settion:中选择settions.xml文件, 点击Update Settings　--> 点击Reindex)．
    
settions.xml文件内容如下:
    <?xml version="1.0" encoding="UTF-8"?>
    <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">

    <localRepository>D:\ProConfig\java_Common_pkg\maven\repository</localRepository> <!--本地仓库的位置-->
        <mirrors>
            <mirror> <!--设置为阿里巴巴的maven仓库-->
                <id>nexus-aliyun</id>
                <mirrorOf>*</mirrorOf>
                <name>Nexus aliyun</name>
                <url>http://maven.aliyun.com/nexus/content/groups/public</url>
            </mirror>
        </mirrors>
    </settings>



pom.xml中jar文件的定位:
    <dependencies> <!--所要依赖的构件(jar包)统一在这个节点下配置-->
        <dependency> <!--依赖的构件(jar包)-->
            <groupId>org.apache.commons</groupId> <!--包名: 也就是域名的反写-->
            <artifactId>commons-tool</artifactId> <!--项目名-->
            <version>3.4</version>  <!--所需的jar版本-->
        </dependency>
        
        <dependency> 
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-log</artifactId> 
            <version>3.2.1</version>
        </dependency>
        
        <dependency> 
            ...
        </dependency>
        ...
    </dependencies>

maven java项目结构:
simple
    │---pom.xml //核心配置(项目根目录下)
    │---src
    │    │---main
    │    │    │---java         //java源码目录
    │    │    └─--resources    //java配置文件目录
    │    └---test
    │        │---java     //测试源码目录
    │        └---resources //测试配置目录
    └─--target  //输出目录
        
maven web项目结构:
simple
    │---pom.xml //核心配置(项目根目录下)
    │---src
    │    │---main
    │    │    │---java         //java源码目录
    │    │    │---resources    //java配置文件目录
    │    │    └─--webapp       /myeclipse web项目中WebRoot目录
    │    │        │---WEB-INF
    │    │        └─--web.xml
    │    └---test
    │        │---java     //测试源码目录
    │        └---resources //测试配置目录
    └─--target  //输出目录

maven父子工程与子模块:
    创建maven-parent Project(内部可以包含多个Maven Module):
        New Project -> Maven -> Maven Project -> 选中创建一个简单工程 -> New Maven project2页签: Packaging选择POM打包方式->...
    
    创建maven-sub Module:
        New Project -> Maven -> Maven Module -> New Maven Module页签: 选中创建一个简单工程并选择父工程->New Maven Module页签: Packaging选择jar打包方式->...

命令操作maven java或web项目:
编译：mvn compile  --src/main/java目录java源码编译生成class （target目录下）
测试：mvn test     --src/test/java 目录编译
清理：mvn clean    --删除target目录，也就是将class文件等删除
打包：mvn package  --生成压缩文件：java项目--jar包；web项目--war包，也是放在target目录下
安装：mvn install  --将压缩文件(jar或者war)上传到本地仓库
部署|发布：mvn deploy    --将压缩文件上传私服


eclipse中的Maven操作:
    选中工程->右键->Run As -> 可看到对应的maven操作:
    Maven build... : 对应mvn命令,需要在Goals中输入maven对应的生命周期或目标; 如compile, test等
    Maven build: 对Maven build...操作的记录;可以通过它快速执行已执行过的Maven build...命令
    Maven clean : 对应mvn clean
    Maven generate-source : 关联源码
    Maven install: 对应mvn install
    Maven test: 对应mvn test


maven父工程通用的pom.xml配置:
    <project xmlns="http://maven.apache.org/POM/4.0.0" 
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <!--本maven工程的坐标; 用于给其他依赖该项目的项目进行定位-->
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.gjy.test</groupId>
        <artifactId>test_parent</artifactId>
        <version>1.2.3</version>
        <packaging>pom</packaging>

        <!-- 锁定版本 -->
        <properties>
            <spring.version>4.2.4.RELEASE</spring.version>
            ...
        </properties>

        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-context</artifactId>
                    <version>${spring.version}</version>
                </dependency>
                ...
            </dependencies>
        </dependencyManagement>

        <dependencies>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>4.4</version>
            </dependency>
            ...
        </dependencies>

        <build>
            <finalName>test</finalName>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.2</version>
                        <configuration>
                            <source>1.7</source>
                            <target>1.7</target>
                            <encoding>UTF-8</encoding>
                            <showWarnings>true</showWarnings>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManagement>
        </build>
        
        <!--父工程下的子模块-->
        <modules> 
            <module>sub-module-name</module>
            ...
        </modules>
    </project>

    
maven子模块通用的pom.xml配置:
    <!--指定子模块所属的父工程;其实就是父工程的坐标-->
    <parent>
        <groupId>com.gjy.test</groupId>
        <artifactId>test_parent</artifactId>
        <version>1.2.3</version>
    </parent>
    
    
如何获取坐标(也就是三个关键属性值):
使用网站搜索[从中央仓库拿]
步骤一：登陆https://mvnrepository.com/
步骤二：输入关键字查询获得需要内容，确定需要版本
步骤三、获得坐标
    
    
    
    
    
    
    
