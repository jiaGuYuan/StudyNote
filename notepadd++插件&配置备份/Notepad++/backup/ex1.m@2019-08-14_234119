%% 线性回归

%  Instructions
%  ------------
%  对于本练习，您需要实现如下函数(对应如下文件)：
%
%     warmUpExercise.m
%     plotData.m
%     gradientDescent.m
%     computeCost.m
%     gradientDescentMulti.m
%     computeCostMulti.m
%     featureNormalize.m
%     normalEqn.m
%
%  
%
% x : 指的是10,000为单位的人口规模
% y : 指的是$10,000为单位的利润
%

%% Initialization
clear ; close all; clc

%% ==================== Part 1: 基本函数练习 ====================
% 执行 warmUpExercise.m -- 需要自己实现
fprintf('Running warmUpExercise ... \n');
fprintf('5x5 Identity Matrix: \n'); %5x5单位矩阵
warmUpExercise()

fprintf('Program paused. Press enter to continue.\n');
pause;


%% ======================= Part 2: 绘图 =======================
fprintf('Plotting Data ...\n')
data = load('ex1data1.txt');
X = data(:, 1); y = data(:, 2);
m = length(y); % 训练数据的数目

% Plot Data
% Note: 您必须在plotdata.m.中完成代码
plotData(X, y);

fprintf('Program paused. Press enter to continue.\n');
pause;

%% =================== Part 3: 梯度下降 ===================
fprintf('Running Gradient Descent ...\n')

X = [ones(m, 1), data(:,1)]; % 添加一个全为1的列到X -- 对应对参数theta0
theta = zeros(2, 1); % 初始化拟合参数--本例为单变量梯度下降,算上theta0,只需拟合两个参数

% 梯度下降参数设置
iterations = 1500; %迭代次数
alpha = 0.01;      %学习速率

% 代价函数J(θ)
computeCost(X, y, theta)

% 运行梯度下降
[theta, J_history] = gradientDescent(X, y, theta, alpha, iterations);

% 输出梯度下降后得到的theta
fprintf('Theta found by gradient descent: ');
fprintf('%f %f \n', theta(1), theta(2));

% 绘制线性拟合结果
hold on; % 保持之前的图片可见
plot(X(:,2), X*theta, '-')   % X*theta为目标拟合函数
legend('Training data', 'Linear regression')
hold off % 不允许在这个图上覆盖任何更多的情节


% 绘制梯度下降过程中的损失变化曲线
itersNum = length(J_history);
iters = linspace(1, itersNum, itersNum);
figure;
set(gca,'Fontname','Monospaced');
plot(iters, J_history, '-')
xlabel('迭代次数'); ylabel('损失');
pause;

% 预测人口规模为35,000和70,000的值
predict1 = [1, 3.5] *theta;
fprintf('For population = 35,000, we predict a profit of %f\n', predict1*10000);
predict2 = [1, 7] * theta;
fprintf('For population = 70,000, we predict a profit of %f\n', predict2*10000);

fprintf('Program paused. Press enter to continue.\n');
pause;

%% ============= Part 4: 可视化 J(theta_0, theta_1) =============
fprintf('Visualizing J(theta_0, theta_1) ...\n')

% 对不同的theta_0, theta_1计算J(θ); 并绘制网格线图
theta0_vals = linspace(-10, 10, 100);
theta1_vals = linspace(-1, 4, 100);

J_vals = zeros(length(theta0_vals), length(theta1_vals));
for i = 1:length(theta0_vals)
    for j = 1:length(theta1_vals)
        t = [theta0_vals(i); theta1_vals(j)];    % t是一个列向量
        J_vals(i,j) = computeCost(X, y, t);
    end
end


% 因为surf绘图的原因,需要对J_vals进行转置
J_vals = J_vals';
% 绘制网格线表面图
figure;
surf(theta0_vals, theta1_vals, J_vals)
xlabel('\theta_0'); ylabel('\theta_1');

% 等高线图
figure;
% 将J_vals绘制为15个等高线，间隔对数在0.01和1000之间
contour(theta0_vals, theta1_vals, J_vals, logspace(-2, 3, 20))
xlabel('\theta_0'); ylabel('\theta_1');
hold on;
plot(theta(1), theta(2), 'rx', 'MarkerSize', 10, 'LineWidth', 2);
